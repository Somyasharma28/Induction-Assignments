openapi: "3.0.1"
info:
  title: "Test-SNS-Topic"
  version: 1.0.1

paths:
  /sendMail:
    post:
      parameters:
      - name: "Content-Type"
        in: "header"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
      requestBody:
        description: Request body input schema for sending mail
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bodySchmena'
      x-amazon-apigateway-request-validator: bodyandparams
      x-amazon-apigateway-integration:
        credentials: 
          Fn::Sub: ${CloudAssignment1Role.Arn}
        httpMethod: "POST"
        uri: "arn:aws:apigateway:ap-south-1:sns:path//"
        responses:
          default:
            statusCode: "200"
            responseTemplates:
              application/json: |-
                #set($messageId=$input.json('$.PublishResponse.PublishResult.MessageId'))
                #if($messageId.length()>2)
                {    
                  "message":"Message published"
                  "messageId":$messageId
                }
                #else 
                $input.body
                #end
        requestParameters:
          integration.request.header.Content-Type: "method.request.header.Content-Type"
        requestTemplates:
          application/json: 
            Fn::Sub :
              - |-
                #set($topic="${topicArn}")
                Action=Publish&TopicArn=$util.urlEncode($topic)&Message=$util.urlEncode($input.body)
              - topicArn:
                  Fn::Sub: ${CloudAssignment2SNSTopic}
        passthroughBehavior: "when_no_templates"
        type: "aws"
  
components:
  schemas:
    SuccessResponse:
      type: "object"
      properties:
        message:
          type: string
        messageId:
          type: string
    bodySchmena:
      type: "object"
      additionalProperties: false
      required:
        - mailTo
        - mailSubject
        - mailBody
      properties:
        mailTo:
          type: string
          format: email
        mailSubject:
          type: string
          minLength: 1
        mailBody:
          type: string
          minLength: 1

x-amazon-apigateway-request-validators:
  bodyandparams:
    validateRequestParameters: true
    validateRequestBody: true

x-amazon-apigateway-gateway-responses:
  BAD_REQUEST_BODY:
    responseTemplates:
      application/json: |
        {
          "message": "$context.error.validationErrorString"
        } 